{
  "fulltexts": [
    {
      "paper_uuid": "ff3af72c-138e-4156-b764-1749000f1cf2",
      "page_number": 0,
      "text": "テクニカルレポートCDSL Technical Report通信障害時に迂回経路でデータ転送をする方式柴智瀚1,a)串田 高幸1概要：サーバとデバイスが通信をしている時に通信障害が発生し, データを引き続き送信するのが難しくなって, データが時々無くなってしまう課題がある. このような問題を解決するために, デバイス付近にあるサーバと繋がっている別のデバイスを探索し, BLE(Bluetooth Low Energy) を用いて一時的に近隣のデバイス経由して継続的にデータを送信する方法を提案する. この提案によって, IoT デバイスが自分自身とサーバへの接続状態を監視し, 通信障害が起こった際に周囲に転送リクエストをブロードキャストする. リクエストを受信したデバイスが相互の BLE 通信状況を評価し, プリセット値を超え, 経由ノードとしての通信時間が最も短いデバイスを介してデータの転送を開始する. BLE 通信状況に対する評価方法は, IoT デバイス間のパケット配信率 (Packet Delivery Ratio:PDR) を評価することである. 提案に対する評価方法は, IoT デバイスが直接サーバへ送信する時間と転送ノードを経由して送信する時間を比較して結論を出す.1.はじめに背景近年では, IoT(Internet of Things) が大きな研究の注目を集めている. 将来のインターネットの一部と見されており, 何十億の知能な「モノ」で構成される規模になると見込まれている [1]. この膨大な数を持っているインターネットを構築する際には無線通信が不可欠な存在だと考えられている. インストールコストを削減できることは, 有線通信に対する無線通信の主な利点の一つである [2]. 徐々に話題になってくる IoT では常に百台, 千台以上のデバイスが設置されている. この場合, 千台のデバイスを有線で繋がると相当な費用がかかると予想される. したがって既存のIoT デバイスは無線通信を使ってデータの送受信をやっているケースが大多数である. IoT は機器の監視手段として多く扱われて, 特定の場所に IoT デバイスを設けていれば,この場所の温度, 湿度をリアルタイムで監視すうことが可能である, サーバで監視したデータを取得して分析を行い,異変と異常を検知することで問題を早めに解決するのが大きな特徴である.既存の無線通信は多種多様であり, Wi-Fi, Zigbee と Blue-tooth がよく使われている. 特に Bluetooth は低消費電力,低コスト, 高可用性と高精度のため室内の超低電力短距離通信 IoT 配置に揺るぎない位置を占めている [3]. Bluetoothは低電力通信要件を満たし, データ伝送のエネルギー効率1東京工科大学コンピュータサイエンス学部〒 192–0982 東京都八王子市片倉町 1404-1a)C0118185の方が Wi-Fi より 30%の増幅が見られており, ほとんどのモバイルデバイスで利用できると言った様々な利点を持っている [4]. 短距離通信と言ったら最初に頭に浮かぶのは必ず Bluetooth といっても過言ではない. しかし, その複雑な検出メカニズムのため, IoT の膨大なデバイス数に向いていない [5]. これらの制限に直面して, BLE は IoT 主導の通信方法として従来の BL に徐々に取って代わった [6]. BLEは, ペアリングを排除し, Bluetooth に固有の複雑な検出を簡素化すると同時に, 短いデータ交換をサポートするように設計されていた [7][8]. 本稿では BLE を用いて, サーバとの通信障害があるデバイスに対する通信を維持させる迂回経路を設計する.課題IoT デバイスとサーバへの通信が電波干渉や金属による通信障害が時々発生する. また移動中のデバイスが通信範囲外に辿り着いて, 従来の Wi-Fi と接続できなくてデータを送信できないジレンマに陥ってしまう. 通信手段によるデータが正確にサーバへ伝送できたかどうかがわからない.できない場合はデータの損失とデータの信頼性が低下してしまう恐れがある. IoT とサーバへの送受信が一旦切れたら, リアルタイムでデータを送ったり, データを分析したりすることも不可能になってしまう. これらの問題を解決するために, 次の課題を直面している. 迂回回路の時にどの経路が最良なのかを検討しなければならない. 図 1 は経路選択問題を示す. このような複数の IoT デバイスが存在する時, ESP32A が ESP32C と ESP32D を経由してもいいが,ESP32B と ESP32C のような 2hop でデータを転送してもc⃝ 2020 Cloud and Distributed Systems Laboratory1"
    },
    {
      "paper_uuid": "ff3af72c-138e-4156-b764-1749000f1cf2",
      "page_number": 0,
      "text": "テクニカルレポートCDSL Technical Report通信障害時に迂回経路でデータ転送をする方式柴智瀚1,a)串田 高幸1概要：サーバとデバイスが通信をしている時に通信障害が発生し, データを引き続き送信するのが難しくなって, データが時々無くなってしまう課題がある. このような問題を解決するために, デバイス付近にあるサーバと繋がっている別のデバイスを探索し, BLE(Bluetooth Low Energy) を用いて一時的に近隣のデバイス経由して継続的にデータを送信する方法を提案する. この提案によって, IoT デバイスが自分自身とサーバへの接続状態を監視し, 通信障害が起こった際に周囲に転送リクエストをブロードキャストする. リクエストを受信したデバイスが相互の BLE 通信状況を評価し, プリセット値を超え, 経由ノードとしての通信時間が最も短いデバイスを介してデータの転送を開始する. BLE 通信状況に対する評価方法は, IoT デバイス間のパケット配信率 (Packet Delivery Ratio:PDR) を評価することである. 提案に対する評価方法は, IoT デバイスが直接サーバへ送信する時間と転送ノードを経由して送信する時間を比較して結論を出す.1.はじめに背景近年では, IoT(Internet of Things) が大きな研究の注目を集めている. 将来のインターネットの一部と見されており, 何十億の知能な「モノ」で構成される規模になると見込まれている [1]. この膨大な数を持っているインターネットを構築する際には無線通信が不可欠な存在だと考えられている. インストールコストを削減できることは, 有線通信に対する無線通信の主な利点の一つである [2]. 徐々に話題になってくる IoT では常に百台, 千台以上のデバイスが設置されている. この場合, 千台のデバイスを有線で繋がると相当な費用がかかると予想される. したがって既存のIoT デバイスは無線通信を使ってデータの送受信をやっているケースが大多数である. IoT は機器の監視手段として多く扱われて, 特定の場所に IoT デバイスを設けていれば,この場所の温度, 湿度をリアルタイムで監視すうことが可能である, サーバで監視したデータを取得して分析を行い,異変と異常を検知することで問題を早めに解決するのが大きな特徴である.既存の無線通信は多種多様であり, Wi-Fi, Zigbee と Blue-tooth がよく使われている. 特に Bluetooth は低消費電力,低コスト, 高可用性と高精度のため室内の超低電力短距離通信 IoT 配置に揺るぎない位置を占めている [3]. Bluetoothは低電力通信要件を満たし, データ伝送のエネルギー効率1東京工科大学コンピュータサイエンス学部〒 192–0982 東京都八王子市片倉町 1404-1a)C0118185の方が Wi-Fi より 30%の増幅が見られており, ほとんどのモバイルデバイスで利用できると言った様々な利点を持っている [4]. 短距離通信と言ったら最初に頭に浮かぶのは必ず Bluetooth といっても過言ではない. しかし, その複雑な検出メカニズムのため, IoT の膨大なデバイス数に向いていない [5]. これらの制限に直面して, BLE は IoT 主導の通信方法として従来の BL に徐々に取って代わった [6]. BLEは, ペアリングを排除し, Bluetooth に固有の複雑な検出を簡素化すると同時に, 短いデータ交換をサポートするように設計されていた [7][8]. 本稿では BLE を用いて, サーバとの通信障害があるデバイスに対する通信を維持させる迂回経路を設計する.課題IoT デバイスとサーバへの通信が電波干渉や金属による通信障害が時々発生する. また移動中のデバイスが通信範囲外に辿り着いて, 従来の Wi-Fi と接続できなくてデータを送信できないジレンマに陥ってしまう. 通信手段によるデータが正確にサーバへ伝送できたかどうかがわからない.できない場合はデータの損失とデータの信頼性が低下してしまう恐れがある. IoT とサーバへの送受信が一旦切れたら, リアルタイムでデータを送ったり, データを分析したりすることも不可能になってしまう. これらの問題を解決するために, 次の課題を直面している. 迂回回路の時にどの経路が最良なのかを検討しなければならない. 図 1 は経路選択問題を示す. このような複数の IoT デバイスが存在する時, ESP32A が ESP32C と ESP32D を経由してもいいが,ESP32B と ESP32C のような 2hop でデータを転送してもc⃝ 2020 Cloud and Distributed Systems Laboratory1"
    },
    {
      "paper_uuid": "ff3af72c-138e-4156-b764-1749000f1cf2",
      "page_number": 2,
      "text": "テクニカルレポートCDSL Technical Report文には BLE と Wi-Fi 共に RSS の測定データベースを採用したが, それぞれ各自の参照データベースが異なっている.Wi-Fi の方は kthrss データベースを選択し, BLE の方はBLE RSS データベースを選択した. Bharath Sudharsanらの論文により彼らのモデルで Wi-Fi と BLE の RSS をそれぞれ 94.14%と 92.55%で予測できる. 本稿との違いは評価指標である. Bharath Sudharsan らの論文は RSS で検測したが, RSS はメトリックとしてどれほどの確信度があるのか説明されていなかった.3.提案提案としては通信障害があるデバイスが BLE 通信範囲にある他のデバイスを経由して、最終に取得したデータをサーバへ転送する. このため, 各自 IoT デバイスに送信用プログラム, デバイスとサーバへの Wi-Fi 通信状況を監視プログラムとデバイス相互の BLE 通信状況を評価するプログラムが内蔵されなければならない. 図 3 はこれを示す.一般的にデータを取得するデバイスを伝送デバイスとする. Wi-Fi 通信状況を監視するプログラムは伝送デバイスとサーバの通信障害に異常を検知していない場合は, いつもの通り何の変更もないままである. 一方, 伝送デバイスがサーバとの通信状況が異常が出る場合は, BLE モードを使い, BLE 通信範囲内における転送デバイスを探して, 転送デバイスを経由ノードとして通信ルートを変更させる.図 4 を参考する. これで, 通信障害を受け入れたデバイスにデータ送信を維持させることができる.図 3アーキテクチャ図 1前述の通りこのようなことを実現するため, どのデバイスを経由という経路選択問題を先に解決しなければならない. Raul Rondon らの論文により BLE 通信のデバイスには、ペリフェラル (Peripheral)、セントラル (Central)、ブロードキャスター (Broadcaster)、オブザーバー (Observer)の 4 つの異なる役割を割り当てることができる. ブロード図 4アーキテクチャ図 2キャスターとオブザーバーの役割を持つデバイスは、アドバタイジングチャネルを利用して、それぞれブロードキャストデータを送受信する [15]. BLE は近距離通信技術として開発され, 30 メートル以上の距離を設定することは可能ではあるが、実際には 5 メートル程度にまで短くされる.このため, 通信帯域が圧迫せずに BLE 通信範囲内にある全てのデバイスへブロードキャストしてパケットを送信することが可能となっている. その後, パケットを受信したデバイスが受け取ったパケットをサーバへ転送して, サーバで最終に到着したデータ量を評価する. ここに評価する基準は PDR(パケット配信率) を採用する. その評価結果が予め設定された値を達すると, サーバから転送デバイスを経由して伝送デバイスまでかかった時間を計算して, 時間の短い順で, 一番かかった時間が短いリンクから転送デバイスを選択する. このリンクの転送デバイスを経由ノードとして二つのデバイスの接続を確立し, データを転送し始める.一つのノードを経由してアクセスできるシングルホップパターンと複数のノードを経由するマルチホップパターンがある. シングルホップであれば一つのノードを経由してデータを送信することが可能する, これを図 2 で示す. 図 5であるマルチホップの方は更に複雑になる. 通信障害があるノードが BLE を使って, 通信範囲内における全てのノードがサーバへ接続できないであれば, 又はスリープモードの場合だと, 範囲内におけるノードをもう一回 BLE 通信範囲内におけるサーバへ接続できるノードを探索が必要がある.4.実装と実験環境実装の概念図とするソフトウェア構成図を図 6 に示す.図 6 であるそれぞれ番号の内容は後で述べた.c⃝ 2020 Cloud and Distributed Systems Laboratory3"
    },
    {
      "paper_uuid": "ff3af72c-138e-4156-b764-1749000f1cf2",
      "page_number": 2,
      "text": "テクニカルレポートCDSL Technical Report文には BLE と Wi-Fi 共に RSS の測定データベースを採用したが, それぞれ各自の参照データベースが異なっている.Wi-Fi の方は kthrss データベースを選択し, BLE の方はBLE RSS データベースを選択した. Bharath Sudharsanらの論文により彼らのモデルで Wi-Fi と BLE の RSS をそれぞれ 94.14%と 92.55%で予測できる. 本稿との違いは評価指標である. Bharath Sudharsan らの論文は RSS で検測したが, RSS はメトリックとしてどれほどの確信度があるのか説明されていなかった.3.提案提案としては通信障害があるデバイスが BLE 通信範囲にある他のデバイスを経由して、最終に取得したデータをサーバへ転送する. このため, 各自 IoT デバイスに送信用プログラム, デバイスとサーバへの Wi-Fi 通信状況を監視プログラムとデバイス相互の BLE 通信状況を評価するプログラムが内蔵されなければならない. 図 3 はこれを示す.一般的にデータを取得するデバイスを伝送デバイスとする. Wi-Fi 通信状況を監視するプログラムは伝送デバイスとサーバの通信障害に異常を検知していない場合は, いつもの通り何の変更もないままである. 一方, 伝送デバイスがサーバとの通信状況が異常が出る場合は, BLE モードを使い, BLE 通信範囲内における転送デバイスを探して, 転送デバイスを経由ノードとして通信ルートを変更させる.図 4 を参考する. これで, 通信障害を受け入れたデバイスにデータ送信を維持させることができる.図 3アーキテクチャ図 1前述の通りこのようなことを実現するため, どのデバイスを経由という経路選択問題を先に解決しなければならない. Raul Rondon らの論文により BLE 通信のデバイスには、ペリフェラル (Peripheral)、セントラル (Central)、ブロードキャスター (Broadcaster)、オブザーバー (Observer)の 4 つの異なる役割を割り当てることができる. ブロード図 4アーキテクチャ図 2キャスターとオブザーバーの役割を持つデバイスは、アドバタイジングチャネルを利用して、それぞれブロードキャストデータを送受信する [15]. BLE は近距離通信技術として開発され, 30 メートル以上の距離を設定することは可能ではあるが、実際には 5 メートル程度にまで短くされる.このため, 通信帯域が圧迫せずに BLE 通信範囲内にある全てのデバイスへブロードキャストしてパケットを送信することが可能となっている. その後, パケットを受信したデバイスが受け取ったパケットをサーバへ転送して, サーバで最終に到着したデータ量を評価する. ここに評価する基準は PDR(パケット配信率) を採用する. その評価結果が予め設定された値を達すると, サーバから転送デバイスを経由して伝送デバイスまでかかった時間を計算して, 時間の短い順で, 一番かかった時間が短いリンクから転送デバイスを選択する. このリンクの転送デバイスを経由ノードとして二つのデバイスの接続を確立し, データを転送し始める.一つのノードを経由してアクセスできるシングルホップパターンと複数のノードを経由するマルチホップパターンがある. シングルホップであれば一つのノードを経由してデータを送信することが可能する, これを図 2 で示す. 図 5であるマルチホップの方は更に複雑になる. 通信障害があるノードが BLE を使って, 通信範囲内における全てのノードがサーバへ接続できないであれば, 又はスリープモードの場合だと, 範囲内におけるノードをもう一回 BLE 通信範囲内におけるサーバへ接続できるノードを探索が必要がある.4.実装と実験環境実装の概念図とするソフトウェア構成図を図 6 に示す.図 6 であるそれぞれ番号の内容は後で述べた.c⃝ 2020 Cloud and Distributed Systems Laboratory3"
    },
    {
      "paper_uuid": "ff3af72c-138e-4156-b764-1749000f1cf2",
      "page_number": 3,
      "text": "テクニカルレポートCDSL Technical Report図 5マルチホップ方式4.1実装今度は ESP32 を二つ用意して実験を行った.VM のUbuntu で Ubuntu18.04 をインストールしたもので実験用のサーバを作成した. 図 6 の通り使用しているデバイスはESP32 が ESP32A と ESP32B, サーバが一つある. 各 IoTデバイス (ESP32) が同じなプログラムが内蔵されておる.それぞれはデータを伝送する sender, データ伝送状況を監視する monitor, BLE を使ってリクエストブロードキャストする ble broadcast と IoT デバイス間の BLE 通信状況を評価する status evaluation である. サーバではデータの取得と時間を計算する receiver がある. 一般的な状況ではESP32A の sender が順調にサーバにある receiver にデータを伝送する. もし ESP32A の monitor はその間の Wi-Fi通信が異常を検知したら, ESP32A の blesearch を起動して今の BLE 通信範囲内における全てのデバイスへ発信リクエストをブロードキャストする. ブロードキャストされたパケットを受信した ble central が受信したデータをESP32B の sender へ伝送して, 最終にデータを ESP32B のsender から発信する. 途中に ESP32A の status evaluationがその BLE 通信状況を評価して, ESP32B にある ESP32Bとサーバの通信状況監視する monitor の結果をプラスして最初に設定した基準値以上であれば, ESP32B からサーバまでかかった時間と ESP32A から ESP32B までかかった時間を加算して, 時間が一番短い場合に引き続き ESP32Bを経由ノードとしてデータを転送する. そうでない場合は,接続を切断して最終の評価を満たすまで上述の流れを繰り返す.(1)BMP280 から温度データの取得.(2)Monitor がサーバと ESP32 の通信状況を ICMP を送って定期的に監視する.(3)通信障害に異常を検知した時に転送リクエストをブロードキャストで発信するプログラムを起動する.(4)BLE 通信を使って, 通信範囲内における全てのデバイスと接続して, テスト用データを送る.図 6ソフトウェア構成図(5)転送リクエストを受信した後に BLE 通信評価プログラムは通信障害があるノードへの BLE 通信状況を評価する.(6)通信障害があるノードとの ESP32 はパケット配信率と応答速度が極めて悪い場合は次のノードをリクエスト. そうではない場合には受信した ESP32 を転送ノードとする.(7)全ての ESP32 が監視用プログラムが内蔵しているので, データを転送と同時に自体監視も行っている.図 7フロチャート4.2実験環境実験を行うために ESP32A と ESP32B 二つのデバイスを用意して, サーバは VM の Ubuntu で Ubuntu18.04 を構築したものを使用する [16]. 本研究では通信状況が異常がある時しか機能しないため, 実験する際に ESP32A の Wi-Fi接続を事前に切断する必要がある. 具体的にはデバイスのc⃝ 2020 Cloud and Distributed Systems Laboratory4"
    },
    {
      "paper_uuid": "ff3af72c-138e-4156-b764-1749000f1cf2",
      "page_number": 3,
      "text": "テクニカルレポートCDSL Technical Report図 5マルチホップ方式4.1実装今度は ESP32 を二つ用意して実験を行った.VM のUbuntu で Ubuntu18.04 をインストールしたもので実験用のサーバを作成した. 図 6 の通り使用しているデバイスはESP32 が ESP32A と ESP32B, サーバが一つある. 各 IoTデバイス (ESP32) が同じなプログラムが内蔵されておる.それぞれはデータを伝送する sender, データ伝送状況を監視する monitor, BLE を使ってリクエストブロードキャストする ble broadcast と IoT デバイス間の BLE 通信状況を評価する status evaluation である. サーバではデータの取得と時間を計算する receiver がある. 一般的な状況ではESP32A の sender が順調にサーバにある receiver にデータを伝送する. もし ESP32A の monitor はその間の Wi-Fi通信が異常を検知したら, ESP32A の blesearch を起動して今の BLE 通信範囲内における全てのデバイスへ発信リクエストをブロードキャストする. ブロードキャストされたパケットを受信した ble central が受信したデータをESP32B の sender へ伝送して, 最終にデータを ESP32B のsender から発信する. 途中に ESP32A の status evaluationがその BLE 通信状況を評価して, ESP32B にある ESP32Bとサーバの通信状況監視する monitor の結果をプラスして最初に設定した基準値以上であれば, ESP32B からサーバまでかかった時間と ESP32A から ESP32B までかかった時間を加算して, 時間が一番短い場合に引き続き ESP32Bを経由ノードとしてデータを転送する. そうでない場合は,接続を切断して最終の評価を満たすまで上述の流れを繰り返す.(1)BMP280 から温度データの取得.(2)Monitor がサーバと ESP32 の通信状況を ICMP を送って定期的に監視する.(3)通信障害に異常を検知した時に転送リクエストをブロードキャストで発信するプログラムを起動する.(4)BLE 通信を使って, 通信範囲内における全てのデバイスと接続して, テスト用データを送る.図 6ソフトウェア構成図(5)転送リクエストを受信した後に BLE 通信評価プログラムは通信障害があるノードへの BLE 通信状況を評価する.(6)通信障害があるノードとの ESP32 はパケット配信率と応答速度が極めて悪い場合は次のノードをリクエスト. そうではない場合には受信した ESP32 を転送ノードとする.(7)全ての ESP32 が監視用プログラムが内蔵しているので, データを転送と同時に自体監視も行っている.図 7フロチャート4.2実験環境実験を行うために ESP32A と ESP32B 二つのデバイスを用意して, サーバは VM の Ubuntu で Ubuntu18.04 を構築したものを使用する [16]. 本研究では通信状況が異常がある時しか機能しないため, 実験する際に ESP32A の Wi-Fi接続を事前に切断する必要がある. 具体的にはデバイスのc⃝ 2020 Cloud and Distributed Systems Laboratory4"
    },
    {
      "paper_uuid": "ff3af72c-138e-4156-b764-1749000f1cf2",
      "page_number": 4,
      "text": "テクニカルレポートCDSL Technical ReportWi-Fi モードを oﬀ にする後に, ESP32A が自動的に BLE通信モードに変更されたかどうかを確認する. BLE 通信手段でどのぐらいのデータを転送したのかを PDR で表示する. 実験をする際に, 通信障害を持っている ESP32A にある送信するプログラム sender が発送する時点の時間を記録して, 温度データと共にパケットをまとめて BLE でESP32B に内蔵している受信用プログラム ble central に送信する. 受信した後に ESP32B にある sender からデータをサーバへ送信し, サーバにある receiver がデータを受信すると共にデータを受信した時の時間と発信する時の時間を比較して評価する. 最後に発信時間と受信時間の差を ESP32B の sender に返信して表示する. 図 8 はこれを示す.図 8実験図5.評価と分析実験を三つの段階を分けて評価を行う. まずは実験を行い, 人為的に Wi-Fi モードを oﬀ した後に IoT デバイスとサーバへの通信異常を検知するまでかかった時間を算出する. 次に, 通信異常を検知するした後に BLE モードとして動作するまでかかった時間を測る. 最後に転送ノードとして最終にデータをサーバへ転送するまでかかった時間を計測する.• 通信異常の検知• BLE モードの変更• 転送データの到着異常な通信がない場合, 発信元の IoT デバイス ESP32Aから受信元の Server までデータを直接伝送する平均時間と今度の実験で転送ノード ESP32B を経由して ESP32A から Server までデータを間接に転送する平均時間を分けて計算する. 最終的な計算結果を比較して結論を導き出す. 流れは図 9 を示す. 実際に実験を行い, IoT デバイスから直接サーバへ送受信続けて, 平均時間を百回計測して 0.545 秒を得られた. 転送デバイスを経由する場合も百回計測して平均時間は 1.823 秒である数値を取得した. これによって,正常にデバイスから直接サーバへ送信するより, 通信障害のあるデバイスが転送デバイスを BLE で経由して間接に図 9評価概念図送信する方が約 1.2 秒長くかかることが分かった.IoT デバイスから直接にサーバへ送信する場合を正常状態で, 通信障害を受けたと仮定して転送デバイスを経由することでサーバへデータを送信する場合は今度の提案方式である. それぞれの実験回数による時間コスト遷移グラフを図 10 で作成した. 図 10 のように, 正常状態での直接伝送時間コストは計測回数と関係なく, ずっと 0.5 秒左右に維持されている. 一方で近隣の IoT デバイスを経由する場合には時間コストが計測回数と共に周期的のように変わっていくことが発見した. 特にピークの前後における 2 つの値はほぼ 2 秒の巨大な差がある. 時間コストは一旦ピークになったら迅速に減っていく傾向を持っていることも見られる.図 10正常状態と提案方式の時間コスト比較6.議論本研究で通信障害があるデバイスの対処法について研究を遂行し, 参考になれる micropython に基づく BLE 研究を拝読しようと考えていたが, 実際に BLE のモジュールをESP32 に導入するのが未だに未熟であるため, 参考できる記事が極めて少ない. しかし, ラズパイと比べてより小さいサイズを持っているので, 拡張性を強調する IIoT(IndustryInternet of Things) にとって開発価値がある. 関連研究としても BLE 通信に関する研究は ESP32 を用いて行った実験もほとんど掲載されていないことが事実である. これかc⃝ 2020 Cloud and Distributed Systems Laboratory5"
    },
    {
      "paper_uuid": "ff3af72c-138e-4156-b764-1749000f1cf2",
      "page_number": 4,
      "text": "テクニカルレポートCDSL Technical ReportWi-Fi モードを oﬀ にする後に, ESP32A が自動的に BLE通信モードに変更されたかどうかを確認する. BLE 通信手段でどのぐらいのデータを転送したのかを PDR で表示する. 実験をする際に, 通信障害を持っている ESP32A にある送信するプログラム sender が発送する時点の時間を記録して, 温度データと共にパケットをまとめて BLE でESP32B に内蔵している受信用プログラム ble central に送信する. 受信した後に ESP32B にある sender からデータをサーバへ送信し, サーバにある receiver がデータを受信すると共にデータを受信した時の時間と発信する時の時間を比較して評価する. 最後に発信時間と受信時間の差を ESP32B の sender に返信して表示する. 図 8 はこれを示す.図 8実験図5.評価と分析実験を三つの段階を分けて評価を行う. まずは実験を行い, 人為的に Wi-Fi モードを oﬀ した後に IoT デバイスとサーバへの通信異常を検知するまでかかった時間を算出する. 次に, 通信異常を検知するした後に BLE モードとして動作するまでかかった時間を測る. 最後に転送ノードとして最終にデータをサーバへ転送するまでかかった時間を計測する.• 通信異常の検知• BLE モードの変更• 転送データの到着異常な通信がない場合, 発信元の IoT デバイス ESP32Aから受信元の Server までデータを直接伝送する平均時間と今度の実験で転送ノード ESP32B を経由して ESP32A から Server までデータを間接に転送する平均時間を分けて計算する. 最終的な計算結果を比較して結論を導き出す. 流れは図 9 を示す. 実際に実験を行い, IoT デバイスから直接サーバへ送受信続けて, 平均時間を百回計測して 0.545 秒を得られた. 転送デバイスを経由する場合も百回計測して平均時間は 1.823 秒である数値を取得した. これによって,正常にデバイスから直接サーバへ送信するより, 通信障害のあるデバイスが転送デバイスを BLE で経由して間接に図 9評価概念図送信する方が約 1.2 秒長くかかることが分かった.IoT デバイスから直接にサーバへ送信する場合を正常状態で, 通信障害を受けたと仮定して転送デバイスを経由することでサーバへデータを送信する場合は今度の提案方式である. それぞれの実験回数による時間コスト遷移グラフを図 10 で作成した. 図 10 のように, 正常状態での直接伝送時間コストは計測回数と関係なく, ずっと 0.5 秒左右に維持されている. 一方で近隣の IoT デバイスを経由する場合には時間コストが計測回数と共に周期的のように変わっていくことが発見した. 特にピークの前後における 2 つの値はほぼ 2 秒の巨大な差がある. 時間コストは一旦ピークになったら迅速に減っていく傾向を持っていることも見られる.図 10正常状態と提案方式の時間コスト比較6.議論本研究で通信障害があるデバイスの対処法について研究を遂行し, 参考になれる micropython に基づく BLE 研究を拝読しようと考えていたが, 実際に BLE のモジュールをESP32 に導入するのが未だに未熟であるため, 参考できる記事が極めて少ない. しかし, ラズパイと比べてより小さいサイズを持っているので, 拡張性を強調する IIoT(IndustryInternet of Things) にとって開発価値がある. 関連研究としても BLE 通信に関する研究は ESP32 を用いて行った実験もほとんど掲載されていないことが事実である. これかc⃝ 2020 Cloud and Distributed Systems Laboratory5"
    },
    {
      "paper_uuid": "ff3af72c-138e-4156-b764-1749000f1cf2",
      "page_number": 5,
      "text": "テクニカルレポートCDSL Technical Reportら ESP32 の開発価値を着目し, 研究を進め, 将来に IIoT の主流な IoT デバイスの一つになると可能性がある.マルチホップ方式の解決方法をここで軽く述べる. 前述のほとんどがシングルホップ方式だと思うが, 実際のマルチホップ方式はシングルホップの角度から考えてもらえば難しくないはず. ここで図 2 と図 5 を合わせて解説する.まずは図 2 のようなデバイス A がデバイス B を経由してデータを転送するシングルホップ方式から考えよう. この時点で, デバイス B が自体 Wi-Fi でサーバと繋がっていないなら, デバイス B をデバイス A としてもう一歩デバイス B を探すのが一般的だが, マルチホップの構成は逆の方である. 実際に, デバイス A が転送リクエストをブロードキャスト際には, 既にマルチホップでもしくはシングルホップでサーバとの通信が接続されていないデバイスしか経由デバイスにならない. つまりデバイス B が経由ノードとする前に自体がデバイス A にもなったことがある可能性がある. これで既にデバイス A になったことあるデバイスB は自動的にマルチホップ方式になれる.BLE に関する研究は Beacon[14] を関連するケースがあるが, 実際にビーコンを使用するかどうかは、実装内容によって異なる. Beacon は BLE の通信モジュールでデータ発信の役割を担っているものの, データ受信とデータの応用に向かっていない欠点がある. また, Beacon の導入と共に必ず多少のコストがかかってしまうので, 純粋な ESP32で構成された本研究においては適用していない.または今度の実験で BLE を長時間使うと, ブロードキャスターであれオブザーバーであれ, ESP32 に膨大な負荷をかかってしまうことが発見した. API との反応が遅くなるのはともかく, プログラムが機能しないケースも時々起こる. したがって, 使用しないときは BLE をオフにするのが最善である. 全体のソフトウェアを評価する時に, bmp280から取った温度変数をタイムスタンプに変えた後で, 明らかにサーバから返信されたデータの間隔が遅くなっていた.これになった理由はタイムスタンプがウェブサイトから取得してきた可能性がある.評価するの時間変数に関して, 今回の実験では時間差を取るためにタイムスタンプを採用した. しかしながら, ESP32の時間変数には二つの問題がある. 一つ目は ESP32 の時間変数はミリ秒が取得できないである. 既存のライブラリの中の localtime も現地時間ではない. 最後に worldtimeapiというウェブサイトで現地時間を取得することで解決した.二つ目は ESP32 のタイムスタンプ関数は従来の 1970 年ではなく 2000 から計算されているので, サーバにおける従来のタイムスタンプを一致させるもしくは 30 年の空白を埋めるために, 自分で 1970 年から 2000 年までの秒数と現地時間との差を計算して補足させた.7.おわりに本研究では Wi-Fi 通信範囲外にあるか, 電波干渉により通信障害が発生してしまう IoT デバイスに焦点を当てた.通信障害の検出については, 今回は ICMP を送ることで監視する. 通信障害を受けた IoT デバイスの解決策は迂回回路で近隣の IoT デバイスを経由ノードとしてデータを転送し, データの送受信を維持させる手法を提案した. 実験のところに IoT デバイス間の BLE 通信状況を評価するため,PDR という指標を基に評価方法を提出した.本実験では二つ ESP32 を IoT デバイスとして, 通信障害を受けた際に提案によるどれぐらい時間がかかるのを測定した. その結果, 時間コストは経由デバイスを探索, 確立,データを転送するまでの回数に伴って, 周期的に大きく変動し. 平均で約 1.2 秒増えていることが分かった.参考文献[1]Shancang Li, Li Da Xu and Shanshan Zhao:The internetof things: a survey Springer Science+Business MediaNew York 2014, DOI 10.1007/s10796-014-9492-7(2015).[2]KanitkornKhanchueaandRawatSiripokarpirom:AMulti-ProtocolIoTGatewayandWiFi/BLESen-sor Nodes for Smart Home and Building Automa-tion: Design and Implementation 2019 10th Interna-tional Conference of Information and CommunicationTechnology for Embedded Systems (IC-ICTES), DOI10.1109/ICTEmSys.2019.8695968(2019).[3]ChengZhou,JiazhengYuan,HongzheLiuandJingQiu:Bluetooth Indoor Positioning Based on RSSIand Kalman Filter Wireless Personal Communications,96, pages4115–4130(2017).[4]Guntur Dharma Putra, Azkario Rizky Pratama, Alexan-der Lazovik and Marco Aiello: Comparison of energyconsumption in Wi-Fi and bluetooth communication in aSmart Building 2017 IEEE 7th Annual Computing andCommunication Workshop and Conference (CCWC),DOI 10.1109/CCWC.2017.7868425(2017)[5]Albert F. Harris III, Vansh Khanna, G ¨ uliz Tuncay,Roy Want, and Robin Kravets: Bluetooth Low Energy inDense IoT Environments IEEE Communications Mag-azine, DOI 10.1109/MCOM.2016.1600546CM(2016).[6]Johanna Nieminen, Carles Gomez, Markus Isomaki,Teemu Savolainen, Basavaraj Patil, Zach Shelby, Min-jun Xi,and Joaquim Oller:Networking Solutionsfor Connecting Bluetooth Low Energy Enabled Ma-chines to the Internet of Things IEEE Network, DOI10.1109/MNET.2014.6963809(2014)[7]Bluetooth 4.2 Core Speciﬁcation tech. rep., Bluetooth,(2014).[8]Roy Want, Bill Schilit, and Dominik Laskowski: Blue-tooth LE Finds Its Niche IEEE Pervasive Computing,DOI 10.1109/MPRV.2013.60(2014).[9]Huang-Chen Lee , Senior Member, IEEE, and KaiHsiangKe:Monitoring of Large-Area IoT Sensors Using a LoRaWireless Mesh Network System: Design and EvaluationIEEE Transactions on Instrumentation and Measure-ment, DOI 10.1109/TIM.2018.2814082(2018).[10]Sanjit Biswas and Robert Morris:ExOR: Opportunisticc⃝ 2020 Cloud and Distributed Systems Laboratory6"
    },
    {
      "paper_uuid": "ff3af72c-138e-4156-b764-1749000f1cf2",
      "page_number": 5,
      "text": "テクニカルレポートCDSL Technical Reportら ESP32 の開発価値を着目し, 研究を進め, 将来に IIoT の主流な IoT デバイスの一つになると可能性がある.マルチホップ方式の解決方法をここで軽く述べる. 前述のほとんどがシングルホップ方式だと思うが, 実際のマルチホップ方式はシングルホップの角度から考えてもらえば難しくないはず. ここで図 2 と図 5 を合わせて解説する.まずは図 2 のようなデバイス A がデバイス B を経由してデータを転送するシングルホップ方式から考えよう. この時点で, デバイス B が自体 Wi-Fi でサーバと繋がっていないなら, デバイス B をデバイス A としてもう一歩デバイス B を探すのが一般的だが, マルチホップの構成は逆の方である. 実際に, デバイス A が転送リクエストをブロードキャスト際には, 既にマルチホップでもしくはシングルホップでサーバとの通信が接続されていないデバイスしか経由デバイスにならない. つまりデバイス B が経由ノードとする前に自体がデバイス A にもなったことがある可能性がある. これで既にデバイス A になったことあるデバイスB は自動的にマルチホップ方式になれる.BLE に関する研究は Beacon[14] を関連するケースがあるが, 実際にビーコンを使用するかどうかは、実装内容によって異なる. Beacon は BLE の通信モジュールでデータ発信の役割を担っているものの, データ受信とデータの応用に向かっていない欠点がある. また, Beacon の導入と共に必ず多少のコストがかかってしまうので, 純粋な ESP32で構成された本研究においては適用していない.または今度の実験で BLE を長時間使うと, ブロードキャスターであれオブザーバーであれ, ESP32 に膨大な負荷をかかってしまうことが発見した. API との反応が遅くなるのはともかく, プログラムが機能しないケースも時々起こる. したがって, 使用しないときは BLE をオフにするのが最善である. 全体のソフトウェアを評価する時に, bmp280から取った温度変数をタイムスタンプに変えた後で, 明らかにサーバから返信されたデータの間隔が遅くなっていた.これになった理由はタイムスタンプがウェブサイトから取得してきた可能性がある.評価するの時間変数に関して, 今回の実験では時間差を取るためにタイムスタンプを採用した. しかしながら, ESP32の時間変数には二つの問題がある. 一つ目は ESP32 の時間変数はミリ秒が取得できないである. 既存のライブラリの中の localtime も現地時間ではない. 最後に worldtimeapiというウェブサイトで現地時間を取得することで解決した.二つ目は ESP32 のタイムスタンプ関数は従来の 1970 年ではなく 2000 から計算されているので, サーバにおける従来のタイムスタンプを一致させるもしくは 30 年の空白を埋めるために, 自分で 1970 年から 2000 年までの秒数と現地時間との差を計算して補足させた.7.おわりに本研究では Wi-Fi 通信範囲外にあるか, 電波干渉により通信障害が発生してしまう IoT デバイスに焦点を当てた.通信障害の検出については, 今回は ICMP を送ることで監視する. 通信障害を受けた IoT デバイスの解決策は迂回回路で近隣の IoT デバイスを経由ノードとしてデータを転送し, データの送受信を維持させる手法を提案した. 実験のところに IoT デバイス間の BLE 通信状況を評価するため,PDR という指標を基に評価方法を提出した.本実験では二つ ESP32 を IoT デバイスとして, 通信障害を受けた際に提案によるどれぐらい時間がかかるのを測定した. その結果, 時間コストは経由デバイスを探索, 確立,データを転送するまでの回数に伴って, 周期的に大きく変動し. 平均で約 1.2 秒増えていることが分かった.参考文献[1]Shancang Li, Li Da Xu and Shanshan Zhao:The internetof things: a survey Springer Science+Business MediaNew York 2014, DOI 10.1007/s10796-014-9492-7(2015).[2]KanitkornKhanchueaandRawatSiripokarpirom:AMulti-ProtocolIoTGatewayandWiFi/BLESen-sor Nodes for Smart Home and Building Automa-tion: Design and Implementation 2019 10th Interna-tional Conference of Information and CommunicationTechnology for Embedded Systems (IC-ICTES), DOI10.1109/ICTEmSys.2019.8695968(2019).[3]ChengZhou,JiazhengYuan,HongzheLiuandJingQiu:Bluetooth Indoor Positioning Based on RSSIand Kalman Filter Wireless Personal Communications,96, pages4115–4130(2017).[4]Guntur Dharma Putra, Azkario Rizky Pratama, Alexan-der Lazovik and Marco Aiello: Comparison of energyconsumption in Wi-Fi and bluetooth communication in aSmart Building 2017 IEEE 7th Annual Computing andCommunication Workshop and Conference (CCWC),DOI 10.1109/CCWC.2017.7868425(2017)[5]Albert F. Harris III, Vansh Khanna, G ¨ uliz Tuncay,Roy Want, and Robin Kravets: Bluetooth Low Energy inDense IoT Environments IEEE Communications Mag-azine, DOI 10.1109/MCOM.2016.1600546CM(2016).[6]Johanna Nieminen, Carles Gomez, Markus Isomaki,Teemu Savolainen, Basavaraj Patil, Zach Shelby, Min-jun Xi,and Joaquim Oller:Networking Solutionsfor Connecting Bluetooth Low Energy Enabled Ma-chines to the Internet of Things IEEE Network, DOI10.1109/MNET.2014.6963809(2014)[7]Bluetooth 4.2 Core Speciﬁcation tech. rep., Bluetooth,(2014).[8]Roy Want, Bill Schilit, and Dominik Laskowski: Blue-tooth LE Finds Its Niche IEEE Pervasive Computing,DOI 10.1109/MPRV.2013.60(2014).[9]Huang-Chen Lee , Senior Member, IEEE, and KaiHsiangKe:Monitoring of Large-Area IoT Sensors Using a LoRaWireless Mesh Network System: Design and EvaluationIEEE Transactions on Instrumentation and Measure-ment, DOI 10.1109/TIM.2018.2814082(2018).[10]Sanjit Biswas and Robert Morris:ExOR: Opportunisticc⃝ 2020 Cloud and Distributed Systems Laboratory6"
    }
  ]
}